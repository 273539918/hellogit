v1:
  完成了单块应用的解耦拆分（后端已是一个个微服务），内部的SOA服务化已初步完成。前端主要还是浏览器，前端使用nginx作为负载均衡和
  反向代理，总体架构如图V1

v2:
  无线应用开始爆发，为了尽快上线无线应用，推出了v2架构。使用nginx将内部的soa微服务直接暴露，让app直接去调用内部的微服务，但是存在一些问题：
  1. 无线APP和内部服务强耦合，耦合包括接口耦合和域名耦合，任何一遍的变化都可能对另一边产生变化
  2. 每个对外暴露的服务都需要新域名，开销不小
  3. 内部服务需要直接暴露在公网上，有潜在的安全问题
  4. 无线端app为适应不同无线端需要进行大量的聚合、裁剪、适配，随着设备量增多，造成大量重复劳动

v2.5:
  如图所示，加入了BFF(backand of frontend)，BFF可以理解为一种适配服务，将后端的微服务适配到前端设备，为无线端提供统一的API和数据服务。有
  如下好处：
  1. 无线APP和内部微服务不强耦合，通过引入BFF这层间接是的两边可以独立变化
  2. 无线APP只需要知道无线BFF的域名和提供的统一接口，不需要知道内部复杂微服务的域名和细节
  3. 只有无线BFF一个新域名，开销小
  4. 内部服务躲在BFF后面，不会暴露在公网上，安全风险小
  5. 聚合裁剪和适配逻辑在无线BFF上就可以实现大部分，无线APP端可以大大瘦身

  但随着业务增长，和规模变大，v2.5的一些问题开始暴露，比如:
  1. 刚开始只有一个无线BFF集群，是一个单块，但是业务线和团队在不断增加，一方面单块的无线BFF堆砌了大量不同业务线的逻辑，变得越来越臃肿，
  升级维护变得越来越困难
  2. 根据康为法则，单块的无线BFF和多团队之间就出现了不匹配的问题
  3. 随着时间的推移，代码变得越来越复杂，技术债越堆越多，开发效率不断下降，而缺陷数量不断上升
  4. 无线BFF集群是一个失败单点(SPOF , Single Point Of Failure)

v3.0:
  如图所示，对BFF进行拆分，并引入网关专门负责跨横切面的功能，网关负责的功能包括：
  BFF的路由：将来自无线设备的请求路由到后端具体的某个微服务BFF集群
  API认证：对涉及敏感数据API的调用进行集中认证鉴权
  监控： 对API调用进行性能和日志监控
  限流熔断：当出现流量洪峰，或者后端BFF/微服务出现延迟或者故障，网关能够主动进行限流熔断，保护后端服务，同时保持前端用户体检可接收
  防爬虫：分析恶意行为，阻断恶意请求

  随着新业务和新技术的发展，以及单页应用H5等新需求的到来，v3.0逐步扩容到了v4.0

v4.0
  网关也进行了拆分（可编程网关），比如 支持第三方应用的开放平台网关，支持H5单页应用的H5网关。去掉了nginx层。服务器端Web应用也可以看作
  是一种特殊的BFF网关，只不过它输出的是HTML

总结：
 1. BFF = 聚合适配层
 2. 网关主要关注跨横切面逻辑（路由、认证、安全、监控和限流）
 3. 端用户体检层  -> 网关层 -> BFF层 ->微服务层
 4. BFF和网关都是架构演化产物